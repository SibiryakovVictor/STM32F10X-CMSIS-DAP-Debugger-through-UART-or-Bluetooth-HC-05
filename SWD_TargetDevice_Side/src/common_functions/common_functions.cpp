/***************************************************************************************************
 В этом файле - общие функции, которые могут понадобиться везде
***************************************************************************************************/

#include "common_functions.h"

namespace common_functions
{
    
    /**************************************************************************************************
    Описание:  Генератор псевдослучайных байтов
    Аргументы: -
    Возврат:   Псевдослучайный байт
    Замечания: seed фиксирован, поэтому при каждой компиляции значения повторяются в одинаковой 
               последовательности
    **************************************************************************************************/
    uint8_t xorshiftRandomByte(void)
    {
        // seed value
        static uint8_t y8 = 1;

        y8 ^= (y8 << 7);
        y8 ^= (y8 >> 5);
        return y8 ^= (y8 << 3);
    }


    /***************************************************************************************************
                       Линейно пересчитывает величину из одного отрезка в другой

     Description: Принимает val в отрезке val_min.. val_max и пересчитывает это в пропорциональное
                  ret в отрезке от ret_min..ret_max

     Arguments  : -

     Returns    : -

     Caller     : -

     Note(s)    : Вычисления с фиксированной запятой, возвращает просто целое.
                  Формула: ret = k*val + b
                           k = (ret_max - ret_min)/(val_max - val_min)
                           b = ret_min - k*val_min

                  Сие преобразуем вот так: k1 = val_max - val_min
                                           k2 = ret_max - ret_min
                                           c = ret_min*k1 - k2*val_min

                                           ret = (k2*val + c)/k1

    ***************************************************************************************************/
    int64_t linearRescale(int32_t val, int32_t val_min, int32_t val_max, int32_t ret_min, int32_t ret_max )
    {
        // вычисления с фиксированной запятой
        
        // TODO Это надо бы хорошенько перепроверить и может быть даже переделать

        UMBA_ASSERT( val_min < val_max );
        UMBA_ASSERT( ret_min < ret_max );

        int64_t k1 = val_max - val_min;
        int64_t k2 = ret_max - ret_min;
        int64_t c = ret_min*k1 - k2*val_min;

        UMBA_ASSERT(k1 != 0);

        int64_t ret = k2*val + c;

        ret /= k1;

        return ret;
    }

    
}// namespace
